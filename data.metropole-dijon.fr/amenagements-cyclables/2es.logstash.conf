input {
  stdin {
  }
}
filter {
  
  # Génération d'un uuid
  uuid {
    target => "identifier"
  }

  csv {
    columns => [
      "amenagement_cycle", "amenagement_cycle_simplifie", "avancement", "sens_cycle_txt",
      "hors_voirie", "communes", "creation_voie_cycle", "shape_len", "maj_cycle",
      "geo_shape", "geo_point_2d"
    ]
    separator => ";"
    quote_char => '"'
    skip_header => true
  }

  # GeoJSON
  json {
    source => "geo_shape"
    target => "geometry"
  }

  # Booléean à partir de OUI/NON
  if [hors_voirie] == "OUI" {
    mutate {
      replace => { "hors_voirie" => true }
    }
  } else {
    mutate {
      replace => { "hors_voirie" => false }
    }
  }
  if [creation_voie_cycle] == "OUI" {
    mutate {
      replace => { "creation_voie_cycle" => true }
    }
  } else {
    mutate {
      replace => { "creation_voie_cycle" => false }
    }
  }

  # Date uniquement : 2021-02-12T01:00:00+00:00 -> 2021-02-12
  truncate {
    fields => "maj_cycle"
    length_bytes => 10
  }

  # Centroid : objet avec lon et lat
  ruby {
    code => '
      geo_point_2d = event.get("geo_point_2d")
      if geo_point_2d
        lat, lon = geo_point_2d.split(/\s*,\s*/)
        event.set("centroid", {
          "lat": lat.to_f,
          "lon": lon.to_f
        })
      end
    '
  }

  mutate {
    convert => {
      "hors_voirie" => "boolean"
      "creation_voie_cycle" => "boolean"
      "geometry_len" => "float"
    }
    remove_field => [
      "@timestamp", "@version", "message", "event", "host",
      "geo_shape", "geo_point_2d"
    ]
    rename => {
      "communes" => "commune"
      "shape_len" => "geometry_len"
      "maj_cycle" => "timestamp"
    }
  }
}

output {
  elasticsearch {
    hosts => "http://elasticsearch:9200"
    index=> "amenagements-cyclables_index"
  }
}
